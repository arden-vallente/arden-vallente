<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
	<error-handler name="default-error-handler" doc:id="5f2e89a8-ff58-444f-8ece-fca8f36fc175" >
		<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="b9b4e45e-3232-4cb6-a04e-0108b0910cc7" type="ANY">
			<ee:transform doc:name="Set Payload, Set Variable httpStatus and outboundHeader" doc:id="5a6d18c2-507b-4641-8fd0-028796883799">
				<ee:message>
					<ee:set-payload resource="dwl/response/dwl-default-response.dwl" />
				</ee:message>
				<ee:variables>
					<ee:set-variable variableName="httpStatus"><![CDATA[output application/java

var err = if(!isEmpty(payload) and typeOf(payload) == Object and !isEmpty(payload.error)) payload.error else error default error
---
if (!isEmpty(err.errorType) and !isEmpty(Mule::p('errors.' ++ lower(err.errorType.identifier) ++ '.code')))
	Mule::p('errors.' ++ lower(err.errorType.identifier) ++ '.code') as Number
else if (!isEmpty(err.muleMessage)) err.muleMessage.typedAttribute.statusCode as Number
else Mule::p('errors.default.code') as Number
]]></ee:set-variable>
					<ee:set-variable variableName="outboundHeaders"><![CDATA[%dw 2.0
output application/json

var err = if(!isEmpty(payload) and typeOf(payload) == Object and !isEmpty(payload.error)) payload.error else error default error
---
{
	"x-event-id": correlationId,
	"x-event-msg":  if ( !isEmpty(err.errorType) and !isEmpty(Mule::p('errors.' ++ lower(err.errorType.identifier) ++ '.description')) ) Mule::p('errors.' ++ lower(err.errorType.identifier) ++ '.description')
					else if ( !isEmpty(err.muleMessage) ) err.muleMessage.typedAttribute.reasonPhrase
					else Mule::p('errors.default.description'),
	"x-event-code": if ( !isEmpty(err.errorType) and !isEmpty(Mule::p('errors.' ++ lower(err.errorType.identifier) ++ '.code')) ) Mule::p('errors.' ++ lower(err.errorType.identifier) ++ '.code') as Number
					else if ( !isEmpty(err.muleMessage) ) err.muleMessage.typedAttribute.statusCode as Number
					else Mule::p('errors.default.code') as Number
}]]></ee:set-variable>
				
</ee:variables>
			</ee:transform>
			<logger level="ERROR" doc:name="Error Response, httpStatus based on the error" doc:id="5f53fc68-58bd-4d17-b1e1-3c2532c99e44" message="#[%dw 2.0&#10;import * from dwl::scripts::LogUtil&#10;output application/json&#10;&#10;var logObj = {&#10;	&quot;correlationId&quot;: correlationId,&#10;	&quot;applicationName&quot;: app.name,&#10;	&quot;applicationVersion&quot;: Mule::p('app.version'),&#10;	&quot;environment&quot;: Mule::p('mule.env'), &#10;	&quot;flowName&quot;: &quot;default-error-handler&quot;,&#10;	&quot;category&quot;: &quot;error.&quot; ++ lower(error.errorType.identifier), &#10;	&quot;tracePoint&quot;: &quot;ERROR&quot;, &#10;	&quot;message&quot;: &quot;An error was encountered&quot;,&#10;	&quot;error&quot;: if(!isEmpty(payload) and typeOf(payload) == Object and !isEmpty(payload.error)) payload.error else error default error&#10;}&#10;---&#10;logError(logObj)]" />
		</on-error-continue>
	

</error-handler>
	
	<error-handler name="system-error-handler" doc:id="b0654aad-060f-4a78-b9d6-bbcb22b0086e">
		<on-error-continue enableNotifications="true" logException="false" doc:name="On Error Continue" doc:id="440aea82-f1cc-4461-b081-6245e9c404d0" type="HTTP:CONNECTIVITY, HTTP:SECURITY, HTTP:TIMEOUT">
			<logger level="ERROR" doc:name="Log System ERROR" doc:id="586574ae-e8c5-4429-9503-59707e9a07a7" message="ERROR - Exception: #[attributes.error.description]" category="${app.log.category.error}"/>
		
</on-error-continue>
	</error-handler>	
	</mule>
